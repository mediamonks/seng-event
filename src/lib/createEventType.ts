import BaseEvent from './BaseEvent';

type TypeMap<TType extends string> = { [P in TType]: P };

interface IEventTypeClass<TData, TType extends string> {
  types: TypeMap<TType>;
  new (type: TType, data: TData): BaseEvent<TData, TType>;
}

function createEventType<TData>(bubbles?: boolean, cancelable?: boolean, setTimeStamp?: boolean) {
  /*
   * Overload signatures generated by running the following code:
   * console.log(new Array(15).fill(0).map((_, i) => `function createEventTypeHelper<${new Array(i + 1).fill(0).map((_, index) => `T${index + 1} extends string`).join(', ')}>(\ntypes: [${new Array(i + 1).fill(0).map((_, index) => `T${index + 1}`).join(', ')}],\n): IEventTypeClass<TData, ${new Array(i + 1).fill(0).map((_, index) => `T${index + 1}`).join(' | ')}>;`).join('\n'));
   */
  function createEventTypeHelper<T1 extends string>(types: [T1]): IEventTypeClass<TData, T1>;
  function createEventTypeHelper<T1 extends string, T2 extends string>(
    types: [T1, T2],
  ): IEventTypeClass<TData, T1 | T2>;
  function createEventTypeHelper<T1 extends string, T2 extends string, T3 extends string>(
    types: [T1, T2, T3],
  ): IEventTypeClass<TData, T1 | T2 | T3>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string
  >(types: [T1, T2, T3, T4]): IEventTypeClass<TData, T1 | T2 | T3 | T4>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string
  >(types: [T1, T2, T3, T4, T5]): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string
  >(types: [T1, T2, T3, T4, T5, T6]): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string
  >(types: [T1, T2, T3, T4, T5, T6, T7]): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6 | T7>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8],
  ): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string,
    T9 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8, T9],
  ): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string,
    T9 extends string,
    T10 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10],
  ): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string,
    T9 extends string,
    T10 extends string,
    T11 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11],
  ): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string,
    T9 extends string,
    T10 extends string,
    T11 extends string,
    T12 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12],
  ): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string,
    T9 extends string,
    T10 extends string,
    T11 extends string,
    T12 extends string,
    T13 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13],
  ): IEventTypeClass<TData, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13>;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string,
    T9 extends string,
    T10 extends string,
    T11 extends string,
    T12 extends string,
    T13 extends string,
    T14 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14],
  ): IEventTypeClass<
    TData,
    T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14
  >;
  function createEventTypeHelper<
    T1 extends string,
    T2 extends string,
    T3 extends string,
    T4 extends string,
    T5 extends string,
    T6 extends string,
    T7 extends string,
    T8 extends string,
    T9 extends string,
    T10 extends string,
    T11 extends string,
    T12 extends string,
    T13 extends string,
    T14 extends string,
    T15 extends string
  >(
    types: [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15],
  ): IEventTypeClass<
    TData,
    T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14 | T15
  >;
  function createEventTypeHelper(types: Array<string>) {
    class EventType extends BaseEvent<any, string> {
      public static types = types.reduce<TypeMap<string>>((result, t) => ({ ...result, t }), {});

      constructor(type: string, data: TData) {
        super(type, data, bubbles, cancelable, setTimeStamp);
      }

      public clone(): EventType {
        return new EventType(this.type, this.data);
      }
    }

    return EventType;
  }

  return createEventTypeHelper;
}

export default createEventType;
